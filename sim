#!/bin/csh -f

####################################################################################
## Copyright (c) 2015 ; The University of British Columbia ; All rights reserved. ##
##                                                                                ##
## Redistribution  and  use  in  source   and  binary  forms,   with  or  without ##
## modification,  are permitted  provided that  the following conditions are met: ##
##   * Redistributions   of  source   code  must  retain   the   above  copyright ##
##     notice,  this   list   of   conditions   and   the  following  disclaimer. ##
##   * Redistributions  in  binary  form  must  reproduce  the  above   copyright ##
##     notice, this  list  of  conditions  and the  following  disclaimer in  the ##
##     documentation and/or  other  materials  provided  with  the  distribution. ##
##   * Neither the name of the University of British Columbia (UBC) nor the names ##
##     of   its   contributors  may  be  used  to  endorse  or   promote products ##
##     derived from  this  software without  specific  prior  written permission. ##
##                                                                                ##
## THIS  SOFTWARE IS  PROVIDED  BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" ##
## AND  ANY EXPRESS  OR IMPLIED WARRANTIES,  INCLUDING,  BUT NOT LIMITED TO,  THE ##
## IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE ##
## DISCLAIMED.  IN NO  EVENT SHALL University of British Columbia (UBC) BE LIABLE ##
## FOR ANY DIRECT,  INDIRECT,  INCIDENTAL,  SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL ##
## DAMAGES  (INCLUDING,  BUT NOT LIMITED TO,  PROCUREMENT OF  SUBSTITUTE GOODS OR ##
## SERVICES;  LOSS OF USE,  DATA,  OR PROFITS;  OR BUSINESS INTERRUPTION) HOWEVER ##
## CAUSED AND ON ANY THEORY OF LIABILITY,  WHETHER IN CONTRACT, STRICT LIABILITY, ##
## OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ##
## OF  THIS SOFTWARE,  EVEN  IF  ADVISED  OF  THE  POSSIBILITY  OF  SUCH  DAMAGE. ##
####################################################################################

####################################################################################
##                     Run-in-batch Simulation  Flow Manager                      ##
##                                                                                ##
##   Author: Ameer M.S. Abdelhadi (ameer@ece.ubc.ca; ameer.abdelhadi@gmail.com)   ##
##    SRAM-based TCAM; The University of British Columbia (UBC), December 2015    ##
####################################################################################

####################################################################################
## USAGE:                                                                         ##
##   ./sim <Architecture list> <Pattern width list>  <Depth list>                 ##
##         [-s='Random seed List'> [-c='simulation cycles#'] [-p] [-v]            ##
##                                                                                ##
## - arguments surrounded by angle brackets '<>' are mandatory, while  arguments  ##
##   surrouned by square brackets are optional.                                   ##
## - lists are comma delimited list with no spaces and can be surrounded by any   ##
##   type of brackets '()', '[]', '{}', or '<>'.                                  ##
## - Mandatory arguments:                                                         ##
##   * Architecture list is 'LMP' for longest-prefix-match TCAM, 'PEM' for        ##
##     priority-encoded TCAM, or 'LMP,PEM' for both.                              ##
##   * Pattern width is a postive integer and represents multiples of 9-bits.     ##
##   * CAM depth is a positive integer and represents multiples of 1024 lines.    ##
## - Optional switches:                                                           ##
##   * '-s' sets random seed list (default is 0).                                 ##
##   * '-c' sets the number of simulation cycles (default is 1000).               ##
##   * '-p' pipeline write / doubles the number of writing cycles to 1k cycles.   ##
##   * '-v' enables verbosed logging (disabled by default).                       ##
##                                                                                ##
## EXAMPLES:                                                                      ##
## ./sim PEM 1 8                                                                  ##
##    Simulate 1000 cycles (default) of 8K-lines, 9-bit pattern priority-encoded- ##
##    match (PEM) TCAM, 0 random seed (default), not verbosed (default).          ##
## ./sim 4,8 2,4 -s=0,1 -c=1000000 -p -v                                          ##
##    Simulate 1M cycles of 2k/4k lines, 36/73 pattern longest-prefix-match (LPM) ##
##    TCAM, 0/1 seeds, pipelined writes, verbosed.                                ##
##                                                                                ##
## The following files and directories will be created after simulation :         ##
##   - sim.res : A list of simulation results, each run in a separate line,       ##
##               including all design styles.                                     ##
####################################################################################

# setup environment variables and Altera's CAD tools 
# change file to your own flow if necessary 
source ./altera.15.1.csh

# text coloring and formatting
set  BLK  = '\x1b[1;30m' # black
set  RED  = '\x1b[1;31m' # red
set  GRN  = '\x1b[1;32m' # green
set  YLW  = '\x1b[1;33m' # yellow
set  BLU  = '\x1b[1;34m' # blue
set  MGN  = '\x1b[1;35m' # magenta
set  CYN  = '\x1b[1;36m' # cyan
set  GRY  = '\x1b[1;90m' # gray
set  WTE  = '\x1b[1;97m' # gray
set LRED  = '\x1b[1;91m' # light red
set LGRN  = '\x1b[1;92m' # light green
set LYLW  = '\x1b[1;93m' # light yellow
set LBLU  = '\x1b[1;94m' # light blue
set LMGN  = '\x1b[1;95m' # light magenta
set LCYN  = '\x1b[1;96m' # light cyan
set LGRY  = '\x1b[1;37m' # light gray
set  BLKI = '\x1b[7;30m' # black inverted
set  REDI = '\x1b[7;31m' # red inverted
set  GRNI = '\x1b[7;32m' # green inverted
set  YLWI = '\x1b[7;33m' # yellow inverted
set  BLUI = '\x1b[7;34m' # blue inverted
set  MGNI = '\x1b[7;35m' # magenta inverted
set  CYNI = '\x1b[7;36m' # cyan inverted
set  GRYI = '\x1b[7;90m' # gray inverted
set  WTEI = '\x1b[7;97m' # gray inverted
set LREDI = '\x1b[7;91m' # light red inverted
set LGRNI = '\x1b[7;92m' # light green inverted
set LYLWI = '\x1b[7;93m' # light yellow inverted
set LBLUI = '\x1b[7;94m' # light blue inverted
set LMGNI = '\x1b[7;95m' # light magenta inverted
set LCYNI = '\x1b[7;96m' # light cyan inverted
set LGRYI = '\x1b[7;37m' # light gray inverted
set  RST  = '\x1b[0m'    # reset formatting

# require at least 3 arguments
if (${#argv} < 3) then
    printf "${RED}Error: At least 3 arguments are required\n${RST}"
    goto errorMessage
endif

# convert each argument list into a c-shell list (remove commas and etc.)
set ARCHLST = (`echo ${argv[1]} | tr ",()[]{}<>" " "`)
set PATWLST = (`echo ${argv[2]} | tr ",()[]{}<>" " "`)
set CAMDLST = (`echo ${argv[3]} | tr ",()[]{}<>" " "`)

# default optional argument values
set VERBOSE = 0
set PIPEWRT = 0
set SCYCNUM = 1000
set SEEDLST = 0

# optional arguments
set i = 4
while ($i <= ${#argv})
  set ARG1 = `echo ${argv[$i]}|cut -d'=' -f1`
  set ARG2 = `echo ${argv[$i]}|cut -d'=' -f2`
  switch ($ARG1)
    case "-[Vv]":
      set VERBOSE = 1
      breaksw
    case "-[Pp]":
      set PIPEWRT = 1
      breaksw
    case "-[Cc]":
      set SCYCNUM = $ARG2
      breaksw
    case "-[Ss]":
      set SEEDLST = (`echo ${ARG2} | tr ",()[]{}<>" " "`)
      breaksw
    default:
      printf "${RED}Error (${ARG1}): wrong argument\n${RST}"
      goto errorMessage
      breaksw
    endsw
    @ i++
end

# check architecture list argument correctness
foreach ARGVAL ($ARCHLST)
  if ( ($ARGVAL != "PEM") & ($ARGVAL != "LPM") ) then
    printf "${RED}Error (${ARGVAL}):  architecture should be PEM ot LPM\n${RST}"
    goto errorMessage
  endif
end

# check arguments correctness (positive integer numbers)
foreach ARGVAL ($CAMDLST $PATWLST $SCYCNUM)
  set ARGVALIsNumber=`echo $ARGVAL | egrep -c '^[0-9]+$'`
  if ($ARGVALIsNumber != 1) then
    printf "${RED}Error (${ARGVAL}): Pattern width, CAM depth and number of cycles argument list should be a possitive integer list\n${RST}"
    goto errorMessage
  endif
end

# check seed argument correctness (integer)
foreach ARGVAL ($SEEDLST)
  set ARGVALIsNumber=`echo $ARGVAL | egrep -c '^\-?[0-9]+$'`
  if ($ARGVALIsNumber != 1) then
    printf "${RED}Error (${ARGVAL}): Random seed argument list should be an integer list\n${RST}"
    goto errorMessage
  endif
end

# total different fifo designs
@ FlowOprNum = ((${#ARCHLST})*(${#CAMDLST})*(${#PATWLST})*(${#SEEDLST}))
@ FlowOprCnt = 0

printf "${GRNI}== Simulate in batch with the following parameters:\n"
printf "= Architecture       : $ARCHLST\n"
printf "= CAM Depth          : $CAMDLST\n"
printf "= Pattern width      : $PATWLST\n"
printf "= Random seed        : $SEEDLST\n"
printf "= Simulation Cycles  : $SCYCNUM\n"
printf "= Verbose            : $VERBOSE\n${RST}"

# operate on all different RAM parameters
foreach CURARCH ($ARCHLST)
  foreach CURPATW ($PATWLST)
    foreach CURCAMD ($CAMDLST)
      foreach CURSEED ($SEEDLST)
        @ FlowOprCnt++

        printf "${GRNI}\n== Starting Simulation (${FlowOprCnt}/${FlowOprNum}): [Architecture: ${ARCHLST}; TCAM depth:${CURCAMD}; Pattern width:${CURPATW}; Random seed: ${CURSEED}; Simulation cycles:${SCYCNUM}]\n${RST}"

        # remove work directory to recompile verilog
        if (-d work) \rm -rf work
        # recreate work directory
        vlib work

        # run current simulation
//      vlog -work work +define+SIM+ARCH=\"$CURARCH\"+VERBOSE=$VERBOSE+PWRT=$PIPEWRT+CYCC=$SCYCNUM+CDEP=$CURCAMD+PWID=$CURPATW+SEED=$CURSEED+PIPE=0+REGI=0+REGO=0 utils.vh bcam_reg.v prefreg.v lpm_bhv.v tcam_pem_bhv.v tcam_lpm_bhv.v pem_bhv.v camctl.v dpmlab.v mwm20k.v setram.v iitram9bx1k.v iitram9b.v iitcam9b.v iitcam.v iitcam_tb.v
        vlog -work work +define+SIM+ARCH=\"$CURARCH\"+VERBOSE=$VERBOSE+PWRT=$PIPEWRT+CYCC=$SCYCNUM+CDEP=$CURCAMD+PWID=$CURPATW+SEED=$CURSEED+PIPE=0+REGI=0+REGO=0 utils.vh bcam_reg.v prefreg.v lpm_out.v tcam_pem_bhv.v tcam_lpm_bhv.v pem_bhv.v camctl.v dpmlab.v mwm20k.v setram.v iitram9bx1k.v iitram9b.v iitcam9b.v iitcam.v iitcam_tb.v
        vsim -c -L altera_mf_ver -L lpm_ver -L altera_ver -L stratixv_ver -do "run -all" iitcam_tb

        printf "${GRNI}== Simulation (${FlowOprCnt}/${FlowOprNum}) Completed: [Architecture:${ARCHLST}; TCAM depth:${CURCAMD}; Pattern width:${CURPATW}; Random seed: ${CURSEED}; Simulation cycles:${SCYCNUM}]\n${RST}"

      end
    end
  end
end

# clean unrequired files / after run
if (-d work      ) \rm -rf work
if (-e transcript) \rm -f  transcript

goto scriptEnd

# error message
errorMessage:
printf $RED
cat << EOH
USAGE:
  ./sim <Architecture list> <Pattern width list>  <Depth list>
        [-s='Random seed List'] [-c='simulation cycles#'] [-p] [-v]
- arguments surrounded by angle brackets '<>' are mandatory, while  arguments
  surrouned by square brackets are optional.
- lists are comma delimited list with no spaces and can be surrounded by any
  type of brackets '()', '[]', '{}', or '<>'.
- Mandatory arguments:
  * Architecture list is 'LMP' for longest-prefix-match TCAM, 'PEM' for
    priority-encoded TCAM, or 'LMP,PEM' for both.
  * Pattern width is a postive integer and represents multiples of 9-bits.
  * CAM depth is a positive integer and represents multiples of 1024 lines.
- Optional switches:
  * '-s' sets random seed list (default is 0).
  * '-c' sets the number of simulation cycles (default is 1000).
  * '-p' pipeline write / doubles the number of writing cycles to 1k cycles.
  * '-v' enables verbosed logging (disabled by default).
EXAMPLES:
./sim PEM 1 8
   Simulate 1000 cycles (default) of 8K-lines, 9-bit pattern priority-encoded-
   match (PEM) TCAM, 0 random seed (default), not verbosed (default).
./sim 4,8 2,4 -s=0,1 -c=1000000 -v
   Simulate 1M cycles of 2k/4k lines, 36/73 pattern longest-prefix-match (LPM)
   TCAM, 0/1 seeds, verbosed.
The following files and directories will be created after simulation :
  - sim.res : A list of simulation results, each run in a separate line,
              including all design styles.
EOH
printf $RST
scriptEnd:
